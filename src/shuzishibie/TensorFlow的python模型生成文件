
# coding: utf-8

# In[1]:


import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data


# #### 1.设置输入和输出节点的个数,配置神经网络的参数。

# In[2]:


INPUT_NODE = 784     # 输入节点
OUTPUT_NODE = 10     # 输出节点
LAYER1_NODE = 500    # 隐藏层数节点数量       
                              
BATCH_SIZE = 100     # 每次batch打包的样本个数        

# 模型相关的参数
LEARNING_RATE_BASE = 0.8      
LEARNING_RATE_DECAY = 0.99    
REGULARAZTION_RATE = 0.0001   
TRAINING_STEPS = 5000       
MOVING_AVERAGE_DECAY = 0.99  


# #### 2. 定义辅助函数来计算前向传播结果，使用ReLU做为激活函数。

# In[3]:


def inference(input_tensor, avg_class, weights1, biases1, weights2, biases2,weights3,biases3):
    # 不使用滑动平均类
    if avg_class == None:
        layer1 = tf.nn.relu(tf.matmul(input_tensor, weights1) + biases1)
        layer2 = tf.nn.relu(tf.matmul(layer1, weights3) + biases3)
        return tf.matmul(layer2, weights2) + biases2

    else:
        # 使用滑动平均类
        layer1 = tf.nn.relu(tf.matmul(input_tensor, avg_class.average(weights1)) + avg_class.average(biases1))
        layer2 = tf.nn.relu(tf.matmul(layer1, avg_class.average(weights3)) + avg_class.average(biases3))
        return tf.matmul(layer2, avg_class.average(weights2)) + avg_class.average(biases2)  


# #### 3. 定义训练过程。

# In[4]:


def train(mnist):
    x = tf.placeholder(tf.float32, [None, INPUT_NODE], name='xinput')
    
    y_ = tf.placeholder(tf.float32, [None, OUTPUT_NODE], name='yinput')
    # 生成隐藏层的参数。
    weights1 = tf.Variable(tf.truncated_normal([INPUT_NODE, LAYER1_NODE], stddev=0.1))
    biases1 = tf.Variable(tf.constant(0.1, shape=[LAYER1_NODE]))
     # 生成隐藏层的参数。
    weights3 = tf.Variable(tf.truncated_normal([LAYER1_NODE, 200], stddev=0.1))
    biases3 = tf.Variable(tf.constant(0.1, shape=[200]))
    # 生成输出层的参数。
    weights2 = tf.Variable(tf.truncated_normal([LAYER1_NODE, OUTPUT_NODE], stddev=0.1))
    biases2 = tf.Variable(tf.constant(0.1, shape=[OUTPUT_NODE]))

    # 计算不含滑动平均类的前向传播结果
    #y = inference(x, None, weights1, biases1, weights2, biases2,weights3,biases3)
    layer1 = tf.nn.relu(tf.matmul(x, weights1) + biases1)
    #layer2 = tf.nn.relu(tf.matmul(layer1, weights3) + biases3)
    y = tf.add(tf.matmul(layer1, weights2), biases2, name='y_conv_add')

    
    # 定义训练轮数及相关的滑动平均类 
    global_step = tf.Variable(0, trainable=False)
    variable_averages = tf.train.ExponentialMovingAverage(MOVING_AVERAGE_DECAY, global_step)
    variables_averages_op = variable_averages.apply(tf.trainable_variables())
    layer3 = tf.nn.relu(tf.matmul(x, variable_averages.average(weights1)) + variable_averages.average(biases1))
    average_y = tf.add(tf.matmul(layer3, weights2), biases2, name='averagey_conv_add')
   # average_y = inference(x, variable_averages, weights1, biases1, weights2, biases2,weights3,biases3)
    
    # 计算交叉熵及其平均值
    cross_entropy = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=y, labels=tf.argmax(y_, 1))
    cross_entropy_mean = tf.reduce_mean(cross_entropy)
    
    # 损失函数的计算和正则化
    regularizer = tf.contrib.layers.l2_regularizer(REGULARAZTION_RATE)
    regularaztion = regularizer(weights1) + regularizer(weights2)
    loss = cross_entropy_mean + regularaztion
    
    # 设置指数衰减的学习率。
    learning_rate = tf.train.exponential_decay(
        LEARNING_RATE_BASE,
        global_step,
        mnist.train.num_examples / BATCH_SIZE,
        LEARNING_RATE_DECAY,
        staircase=True)
    
    # 优化损失函数
    train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
    
    # 反向传播更新参数和更新每一个参数的滑动平均值
    """定义一个控制依赖，并返回一个上下文管理器
    with g.control_dependencies([a, b, c]):
    # `d` 和 `e` 将在 `a`, `b`, 和`c`执行完之后运行.
    d = …
    e = …
    """
    with tf.control_dependencies([train_step, variables_averages_op]):
        train_op = tf.no_op(name='train')#tf.no_op；什么也不做

    # 计算正确率
    correct_prediction = tf.equal(tf.argmax(average_y, 1), tf.argmax(y_, 1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
    
    # 初始化会话，并开始训练过程。
    with tf.Session() as sess:
        tf.global_variables_initializer().run()
        validate_feed = {x: mnist.validation.images, y_: mnist.validation.labels}
        test_feed = {x: mnist.test.images[1:2], y_: mnist.test.labels[1:2]} 
        
        # 循环的训练神经网络。
        for i in range(TRAINING_STEPS):
            if i % 1000 == 0:
                validate_acc = sess.run(accuracy, feed_dict=validate_feed)
                print("After %d training step(s), validation accuracy using average model is %g " % (i, validate_acc))
            
            xs,ys=mnist.train.next_batch(BATCH_SIZE)
            sess.run(train_op,feed_dict={x:xs,y_:ys})

        test_acc=sess.run(average_y,feed_dict=test_feed)
        print(test_feed)
        print(test_acc)
        # 保存二进制模型  
        output_graph_def = tf.graph_util.convert_variables_to_constants(sess, sess.graph_def, output_node_names=['y_conv_add'])  
        with tf.gfile.FastGFile('datasets/logs/mnist.pb', mode='wb') as f:  
            f.write(output_graph_def.SerializeToString())


# #### 4. 主程序入口，这里设定模型训练次数为5000次。

# In[5]:


def main(argv=None):
    mnist = input_data.read_data_sets("datasets/MNIST_data", one_hot=True)
    train(mnist)

if __name__=='__main__':
    main()

